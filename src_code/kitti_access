import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

def load_image(file_path):
    """Load an image from a file."""
    return cv2.cvtColor(cv2.imread(file_path, cv2.IMREAD_COLOR), cv2.COLOR_BGR2RGB)

def load_disparity(file_path):
    """Load a disparity map from a file and convert to float type."""
    disparity = cv2.imread(file_path, cv2.IMREAD_UNCHANGED).astype(np.float32)
    return disparity / 256.0  # Disparity maps are saved as 16-bit PNGs

def calculate_depth_map(disparity, baseline, focal_length):
    """Convert disparity to depth map using the given baseline and focal length."""
    depth_map = np.where(disparity > 0, (focal_length * baseline) / disparity, 0)
    return depth_map

def read_calibration(calib_dir, file_index):
    """Read calibration data from a file."""
    # Assuming the calibration file follows the naming convention 'file_index.txt'
    calib_path = os.path.join(calib_dir, file_index + '.txt')
    with open(calib_path, 'r') as file:
        for line in file:
            if 'P2' in line:  # Assuming P2 contains intrinsic parameters for the left camera
                values = line.split()
                focal_length = float(values[1])  # Focal length is the second value on the P2 line
                cx = float(values[3])  # cx might be used to estimate the baseline
                break
    baseline = (0.54 * focal_length) / cx  # Placeholder formula; adjust based on actual data
    return focal_length, baseline

def main():
    script_dir = os.path.dirname(__file__)
    data_dir = os.path.join(script_dir, 'kitti_data', 'data_scene_flow')
    calib_dir = os.path.join(script_dir, 'kitti_data', 'data_scene_flow_calib', 'training')  # Adjust to 'testing' if needed
    file_index = '000000'  # Example file index

    # Load calibration data
    focal_length, baseline = read_calibration(calib_dir, file_index)

    # File paths for images and disparity map
    left_image_path = os.path.join(data_dir, 'image_2', file_index + '_10.png')
    right_image_path = os.path.join(data_dir, 'image_3', file_index + '_10.png')
    disparity_path = os.path.join(data_dir, 'disp_occ_0', file_index + '_10.png')
    
    # Load images and disparity
    left_image = load_image(left_image_path)
    disparity = load_disparity(disparity_path)

    # Calculate depth map
    depth_map = calculate_depth_map(disparity, baseline, focal_length)

    # Display results
    plt.figure(figsize=(10, 7))
    plt.subplot(1, 3, 1)
    plt.imshow(left_image)
    plt.title('Left Image')
    plt.subplot(1, 3, 2)
    plt.imshow(disparity, cmap='viridis')
    plt.title('Disparity Map')
    plt.subplot(1, 3, 3)
    plt.imshow(depth_map, cmap='plasma')
    plt.title('Depth Map')
    plt.show()

if __name__ == '__main__':
    main()
